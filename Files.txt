Methods of File Objects
=======================
open() returns a file object, and is most commonly used with two arguments: open(filename, mode).

It is good practice to use the with keyword when dealing with file objects. The advantage is that the file is properly closed after its suite finishes, even if an exception is raised at some point. Using with is also much shorter than writing equivalent try-finally blocks:

>>> with open('workfile') as f:
...     read_data = f.read()
>>> f.closed
True

If you’re not using the with keyword, then you should call f.close() to close the file and immediately to free up any system resources used by it

To Read files:
f.read(size) 
#This reads entire file if you don't specify the size of the in numeric. It will return as a string as text or binary depending on the content. 

If the end of the file has been reached, f.read() will return an empty string ('').

f.readline() reads a single line from the file; a newline character (\n)

If f.readline() returns an empty string, the end of the file has been reached, while a blank line is represented by '\n', a string containing only a single newline.

For reading lines from a file, you can loop over the file object. This is memory efficient, fast, and leads to simple code:

>>> for line in f:
...     print(line, end='')
...
This is the first line of the file.
Second line of the file

f.write() is another operation of file.

f.tell() returns an integer giving the file object’s current position in the file represented as number of bytes from the beginning of the file when in binary mode and an opaque number when in text mode.

To change the file object’s position, use:

f.seek(offset, from_what). 
The position is computed from adding offset to a reference point; the reference point is selected by the from_what argument. 

> 0 measures from the beginning of the file, 
> 1 uses the current file position, and 
> 2 uses the end of the file as the reference point. 
from_what can be omitted and defaults to 0, using the beginning of the file as the reference point.

Example:
>>> f = open('workfile', 'rb+')
>>> f.write(b'0123456789abcdef')
16
>>> f.seek(5)      # Go to the 6th byte in the file
5
>>> f.read(1)
b'5'
>>> f.seek(-3, 2)  # Go to the 3rd byte before the end 
13
>>> f.read(1)
b'd'




